include:
  - project: 'rv/it/int/rivos-sdk'
    ref: rivos/main
    file: '/packager/gitlab-ci-packaging-helper.yml'

variables:
  INSTALL_PATH: "/rivos/sysroot/riscv/boot"
  KUBERNETES_CPU_REQUEST: "32"
  KUBERNETES_CPU_LIMIT: "32"

# Trigger downstream FS-Sim run if job was triggered by upstream DPA pipeline
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      variables:
        TEST_DOWNSTREAM: "true"
    - if: $CI_COMMIT_BRANCH

# Override some variable from 'prepare-version' included from gitlab-ci-packaging-helper
prepare-version:
  after_script:
    - upstream_version="$(git describe --always --tags --abbrev=0 --match='v[0-9].*' | sed -e 's@-rc@~rc@')"
    - sed -i -e "s@GIT_TAG=.\+@GIT_TAG=${upstream_version:1}@" gitvars.env
    # Debugging helper
    - cat gitvars.env

.build-kernel:
  image: gitlab.ba.rivosinc.com:5050/rv/it/int/rivos-sdk:${SDK_BASE_TAG}
  stage: build
  tags: ['docker-cpu-xl']
  needs: ['prepare-version']
  extends: .build-caching
  variables:
    ARTIFACTS_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/artifacts/${CI_COMMIT_REF_NAME}/download?job=${CI_JOB_NAME_SLUG}"
  script:
    - |
      if [[ "$TEST_ONLY" == "yes" ]]; then
        echo "TEST_ONLY mode, download previously built binaries on the same branch"
        curl --output artifacts.zip -L --header "JOB-TOKEN: $CI_JOB_TOKEN" "${ARTIFACTS_URL}"
        unzip artifacts.zip && test -f linux-image*.deb && exit 0
        echo "kernel package not found, falling back to build"
      fi
    - sudo apt update && sudo apt install -y kmod debhelper
    - export SCCACHE_MEMCACHED="tcp://${MEMCACHED_SWPROTO10}"
    - test ! -x /usr/bin/sccache || sccache --show-stats
    - date
    - bash rivos/build.sh ${BUILD_SH_ARGS} | tee -i make_logs_${KERNEL_CONFIG}.txt
    - date
    - test ! -x /usr/bin/sccache || sccache --show-stats
  timeout: 60min
  rules:
      - if: '$CI_COMMIT_BRANCH'
  artifacts:
    paths:
      - linux_*_defconfig.tar.gz
      - make_logs_*_defconfig.txt
      - linux-image*.deb
      - build_*/vmlinux
      - build_*/arch/riscv/boot/Image
    expire_in: 3 hours

.validate-kernel: &validate-kernel
  image: gitlab.ba.rivosinc.com:5050/rv/it/int/rivos-sdk:${SDK_BASE_TAG}
  stage: test
  timeout: 1440min
  artifacts:
    when: always
    paths:
      - rivos/linux_ci/*_defconfig_output
      - rivos/linux_ci/vm_output_*
      - rivos/linux_ci/tests_results/
    expire_in: 3h
  script:
    - rm -rf "${INSTALL_DIR}"
    - apt update
    - pip install fabric decorator
    - cd rivos/linux_ci
    - |
        if [[ "$TEST_SATP" == "yes" ]]; then
          qemu_valid_option=" --satp-valid"
        else
          qemu_valid_option=""
        fi
        if [[ "$TEST_LONG" == "yes" ]]; then
            timeout="1440m"
            long_valid=" --long-valid"
        else
            timeout="60m"
            long_valid=""
        fi
        timeout ${timeout} python3 linux_ci.py --dl-prepared-vm https://gitlab.ba.rivosinc.com/api/v4/projects/38/packages/generic/ubuntu_images/1/ubuntu-22.10-preinstalled-server-riscv64+unmatched.img.xz --version ${KERNEL_CONFIG} ${long_valid} $qemu_valid_option 2>&1 | tee -a -i ${KERNEL_CONFIG}_output
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      when: never
    - if: '$UBUNTU_ARCH == "riscv64"'
      when: never
    - if: '$TEST_ONLY == "true" && $CI_COMMIT_BRANCH'
      when: always
      allow_failure: true
    - if: '$CI_COMMIT_BRANCH'

docker-build-rivos-defconfig:
  extends: .build-kernel
  variables:
    KERNEL_CONFIG: "rivos_defconfig"
    BUILD_SH_ARGS: "${KERNEL_CONFIG} ${KERNEL_CONFIG}"

docker-build-ubuntu-defconfig:
  extends: .build-kernel
  variables:
    KERNEL_CONFIG: "ubuntu_defconfig"
    BUILD_SH_ARGS: "${KERNEL_CONFIG} ${KERNEL_CONFIG}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      when: never
    - when: on_success

.kasan-conf-generic: &kasan-conf-generic
    - echo "CONFIG_KASAN=y" > kasan.conf
    - echo "CONFIG_KUNIT=y" >> kasan.conf
    - echo "CONFIG_KASAN_KUNIT_TEST=m" >> kasan.conf
    - echo "CONFIG_KASAN_MODULE_TEST=m" >> kasan.conf

docker-build-ubuntu-kasan-outline-defconfig:
  extends: .build-kernel
  variables:
    KERNEL_CONFIG: "ubuntu_kasan_outline_defconfig"
    BUILD_SH_ARGS: "${KERNEL_CONFIG} ubuntu_defconfig kasan.conf"
  script:
    - *kasan-conf-generic
    - !reference [.build-kernel, script]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      when: never
    - if: '$TEST_KASAN == "yes"'
      when: on_success

docker-build-ubuntu-kasan-inline-defconfig:
  extends: .build-kernel
  variables:
    KERNEL_CONFIG: "ubuntu_kasan_inline_defconfig"
    BUILD_SH_ARGS: "${KERNEL_CONFIG} ubuntu_defconfig kasan.conf"
  script:
    - *kasan-conf-generic
    - echo "CONFIG_KASAN_INLINE=y" >> kasan.conf
    - !reference [.build-kernel, script]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      when: never
    - if: '$TEST_KASAN == "yes"'
      when: on_success

package-deb:
  extends: .deploy-deb
  dependencies: ['prepare-version', 'docker-build-rivos-defconfig']
  variables:
    PKG_ARCH: "all"
    PKG_DESCRIPTION: "Linux kernel image for RISCV64."
    PKG_DIRECTORIES: "${INSTALL_PATH}"
    PKG_LICENSE: "GPL-2.0"
    PKG_UPSTREAM_VERSION: "${GIT_TAG}"
  before_script:
    # clean up pre-built binaries from the rivos-sdk
    - rm -rf "${INSTALL_PATH}"
    - tar -C/ -xzf linux_rivos_defconfig.tar.gz
    - ln -s "${INSTALL_PATH}"/vmlinuz-* "${INSTALL_PATH}"/vmlinuz
  rules:
    - if: '$CI_COMMIT_BRANCH'

sdk-linux-ubuntu-test:
  extends: .validate-kernel
  needs: ['prepare-version', 'docker-build-ubuntu-defconfig']
  variables:
    KERNEL_CONFIG: "ubuntu_defconfig"

sdk-linux-ubuntu-kasan-inline-test:
  extends: .validate-kernel
  needs: ['prepare-version', 'docker-build-ubuntu-kasan-inline-defconfig']
  variables:
    KERNEL_CONFIG: "ubuntu_kasan_inline_defconfig"
  rules:
    - if: '$TEST_KASAN != "yes"'
      when: never
    - !reference [.validate-kernel, rules]

sdk-linux-ubuntu-kasan-outline-test:
  extends: .validate-kernel
  needs: ['prepare-version', 'docker-build-ubuntu-kasan-outline-defconfig']
  variables:
    KERNEL_CONFIG: "ubuntu_kasan_outline_defconfig"
  rules:
    - if: '$TEST_KASAN != "yes"'
      when: never
    - !reference [.validate-kernel, rules]

# Rebuild the rivos-sdk image if this is the branch the SDK is using.
# Currently the 'latest' tag from the 'rivos/main' branch.
update-sdk:
  extends: .update-sdk
  variables:
    TRIGGER_ROOTFS: "true"
